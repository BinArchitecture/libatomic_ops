language: c

matrix:
  include:
    - os: linux
      compiler: clang
    - os: linux
      compiler: gcc
    - os: osx
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: osx
      env:
        - CFLAGS_EXTRA="-O3 -march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: linux
      compiler: clang
      dist: trusty
      env:
        - CFLAGS_EXTRA="-march=native -std=c11"
    - os: linux
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-march=native -D _FORTIFY_SOURCE=2 -std=c89"
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: clang
      env:
        - CFLAGS_EXTRA="-m32 -march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      compiler: gcc
      env:
        - CFLAGS_EXTRA="-m32 -march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: osx
      env:
        - CFLAGS_EXTRA="-m32 -march=native -D _FORTIFY_SOURCE=2"
        - CONF_ASSERTIONS=--enable-assertions
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-fsanitize=address -fno-common -fno-omit-frame-pointer"
    - os: linux
      compiler: clang
      env:
        - CFLAGS_EXTRA="-fsanitize=memory,undefined -march=native -fno-omit-frame-pointer"
        - MSAN_OR_UBSAN=true
      sudo: required
    - os: linux
      compiler: clang
      env:
        - CONF_INTRINSICS=--disable-atomic-intrinsics
        - CFLAGS_EXTRA="-march=native"
    - os: linux
      addons: { apt: { packages: [ lcov ] } }
      compiler: gcc
      env:
        - CONF_GCOV=--enable-gcov
        - CONF_SHARED=--enable-shared
        - CFLAGS_EXTRA="-march=native -D DEBUG_RUN_ONE_TEST -D VERBOSE"
    - os: linux
      env:
        - CPPCHECK=true
      sudo: required
    - os: linux
      addons:
        apt:
          packages: [ clang-4.0 ]
          sources: [ llvm-toolchain-trusty-4.0 ]
      compiler: clang-4.0
      dist: trusty
      env:
        - CSA_CHECK=true
    - os: linux
      addons: { apt: { packages: [ musl-tools ] } }
      compiler: musl-gcc
      dist: trusty
      env:
        - CFLAGS_EXTRA="-march=native"
        - CONF_ASSERTIONS=--enable-assertions
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=aarch64-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=alpha-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=arm-unknown-linux-gnueabi ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.2.4, NOLIBC_ARCH_ABI=avr32-linux,
             CFLAGS_EXTRA="-fno-strict-aliasing" ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.6.3, NOLIBC_ARCH_ABI=cris-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=hppa-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=ia64-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=m68k-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=mips-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=mips64-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=powerpc-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=powerpc64-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=ppc64le-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=s390x-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.6.3, NOLIBC_ARCH_ABI=sh4-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=sparc-linux,
             CFLAGS_EXTRA="-D AO_NO_SPARC_V9" ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.9.0, NOLIBC_ARCH_ABI=sparc64-linux ]
    - os: linux
      addons: { apt: { packages: [ gcc-multilib ] } }
      env: [ CROSS_GCC_VER=4.6.2, NOLIBC_ARCH_ABI=tilegx-linux ]

before_install:
  - if [[ "$CPPCHECK" == true ]]; then
      git clone --depth=3 https://github.com/danmar/cppcheck.git
            ~/cppcheck -b master;
      make --directory ~/cppcheck -j CXXFLAGS="-O3 -march=native -D NDEBUG";
      MAKEFILE_TARGET=all;
    elif [[ "$CROSS_GCC_VER" != "" ]]; then
      BUILD_ARCH=x86_64;
      TAR_FOLDER_URL=https://www.kernel.org/pub/tools/crosstool/files/bin/$BUILD_ARCH/$CROSS_GCC_VER;
      TARFILE=$BUILD_ARCH-gcc-$CROSS_GCC_VER-nolibc_$NOLIBC_ARCH_ABI.tar.xz;
      wget -O - $TAR_FOLDER_URL/$TARFILE | tar xf - --xz --directory ~;
      CROSS_CC=~/gcc-$CROSS_GCC_VER-nolibc/$NOLIBC_ARCH_ABI/bin/$NOLIBC_ARCH_ABI-gcc;
      export C_INCLUDE_PATH=/usr/include;
      MAKEFILE_TARGET=check-nolink;
    elif [[ "$CSA_CHECK" == true ]]; then
      MAKEFILE_TARGET=all;
    else
      MAKEFILE_TARGET=check;
    fi

install:
  - ./autogen.sh
  - if [[ "$CONF_GCOV" == --en* ]]; then
      gem install coveralls-lcov;
    fi

script:
  - ./configure $CONF_ASSERTIONS $CONF_INTRINSICS $CONF_GCOV
                $CONF_SHARED --enable-werror
  - if [[ "$CSA_CHECK" != true && "$CPPCHECK" != true ]]; then
      cat src/config.h;
    fi
  - if [[ "$CROSS_GCC_VER" != "" ]]; then
      CC=$CROSS_CC;
    fi
  - make -j $MAKEFILE_TARGET CC=$CC CFLAGS_EXTRA="$CFLAGS_EXTRA"
  - if [ -f tests/test_atomic.log ]; then cat tests/test_atomic*.log; fi
  - if [[ "$CSA_CHECK" == true ]]; then
      ${CC} --analyze -Xanalyzer -analyzer-output=text -Werror -I src
            -D AO_TRACE_MALLOC -D VERBOSE tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      ~/cppcheck/cppcheck -f -q --error-exitcode=2 -j16 -U long -D CPPCHECK
                --enable=information,performance,portability,style,warning
                -I src tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      ~/cppcheck/cppcheck -f -q --error-exitcode=2 -U long -D CPPCHECK
                -D AO_TEST_EMULATION --enable=unusedFunction -I src
                tests/*.c src/*.c;
    fi
  - if [[ "$MSAN_OR_UBSAN" == true ]]; then
      UBSAN_OPTIONS="halt_on_error=1" make -C tests check-without-test-driver;
    fi

after_success:
  - if [[ "$CONF_GCOV" == --en* ]]; then
      lcov --capture --directory src --directory tests --output-file coverage.info;
      lcov --remove coverage.info '/usr/*' 'tests/*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi
