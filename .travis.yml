language: c

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

env:
  - CFLAGS_EXTRA_M=
  - CFLAGS_EXTRA="-O3 -march=native"
    CONF_ASSERTIONS=--enable-assertions
  - CFLAGS_EXTRA_M=-m32
      CFLAGS_EXTRA="-march=native"
      CONF_ASSERTIONS=--enable-assertions
  - CONF_INTRINSICS=--disable-atomic-intrinsics
  - CONF_GCOV=--enable-gcov
  - CSA_CHECK=true
      CPPCHECK=true
  - SANITIZE=address
  - SANITIZE=memory,undefined

matrix:
  exclude:
  - os: osx
    compiler: gcc
  - compiler: gcc
    env: CONF_INTRINSICS=--disable-atomic-intrinsics
  - os: osx
    env: CONF_INTRINSICS=--disable-atomic-intrinsics
  - compiler: clang
    env: CONF_GCOV=--enable-gcov
  - compiler: clang
    env: CSA_CHECK=true CPPCHECK=true
  - compiler: gcc
    env: SANITIZE=address
  - os: osx
    env: SANITIZE=address
  - compiler: gcc
    env: SANITIZE=memory,undefined
  - os: osx
    env: SANITIZE=memory,undefined

sudo: required

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CFLAGS_EXTRA_M" == "-m32" ]]; then
      sudo apt-get install gcc-multilib;
    fi
  - if [[ "$CONF_GCOV" == --en* ]]; then
      sudo apt-get install lcov;
      gem install coveralls-lcov;
      CONF_SHARED=--enable-shared;
      CFLAGS_EXTRA="-march=native -DDEBUG_RUN_ONE_TEST -DVERBOSE";
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      git clone --depth=3 https://github.com/danmar/cppcheck.git -b master;
      make --directory cppcheck -j CXXFLAGS="-O3 -march=native -DNDEBUG";
    fi
  - if [[ "$SANITIZE" != "" ]]; then
      CFLAGS_EXTRA="$CFLAGS_EXTRA -fsanitize=$SANITIZE -fno-common -fno-omit-frame-pointer";
    fi
# TODO: Issues found by MSan and UBSan do not cause the build to fail by now.
# Travis Linux/clang-3.4 does not accept -fno-sanitize-recover=undefined,
# and the sanitizer runtime does not seem to handle MSAN_OPTIONS="exitcode=1"
# and UBSAN_OPTIONS="halt_on_error=1".

install:
  - ./autogen.sh

script:
  - ./configure $CONF_ASSERTIONS $CONF_INTRINSICS $CONF_GCOV
                $CONF_SHARED --enable-werror
  - cat src/config.h
  - if [[ "$CSA_CHECK" == true || "$CPPCHECK" == true ]]; then
      make --directory tests list_atomic.c test_atomic_include.h;
    else
      make -j check CFLAGS_EXTRA="$CFLAGS_EXTRA $CFLAGS_EXTRA_M";
    fi
  - if [ -f tests/test_atomic.log ]; then cat tests/test_atomic*.log; fi
  - if [[ "$CSA_CHECK" == true ]]; then
      clang --analyze -Xanalyzer -analyzer-output=text -Werror -I src
            -DAO_TRACE_MALLOC -DVERBOSE tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      cppcheck/cppcheck -f -q --error-exitcode=2 -j16 -Ulong -DCPPCHECK -I src
                --enable=information,performance,portability,style,warning
                tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      cppcheck/cppcheck -f -q --error-exitcode=2 -Ulong -DAO_TEST_EMULATION
                -DCPPCHECK -I src --enable=unusedFunction tests/*.c src/*.c;
    fi

after_success:
  - if [[ "$CONF_GCOV" == --en* ]]; then
      lcov --capture --directory src --directory tests --output-file coverage.info;
      lcov --remove coverage.info '/usr/*' 'tests/*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi
