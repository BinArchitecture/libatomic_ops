language: c

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

env:
  - CFLAGS_EXTRA_M=
  - CFLAGS_EXTRA="-O3 -march=native" CONF_ASSERTIONS=--enable-assertions
  - CFLAGS_EXTRA_M=-m32 CFLAGS_EXTRA="-march=native"
      CONF_ASSERTIONS=--enable-assertions
  - CONF_INTRINSICS=--disable-atomic-intrinsics
  - CONF_GCOV=--enable-gcov
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=aarch64-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=alpha-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=arm-unknown-linux-gnueabi
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=hppa-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=ia64-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=m68k-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=mips-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=mips64-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=powerpc-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=powerpc64-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=ppc64le-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=s390x-linux
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=sparc-linux
      CFLAGS_EXTRA="-DAO_NO_SPARC_V9"
  - CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=sparc64-linux
  - CSA_CHECK=true CPPCHECK=true
  - SANITIZE=address
  - SANITIZE=memory,undefined

matrix:
  exclude:
  - os: osx
    compiler: gcc
  - compiler: gcc
    env: CONF_INTRINSICS=--disable-atomic-intrinsics
  - os: osx
    env: CONF_INTRINSICS=--disable-atomic-intrinsics
  - compiler: clang
    env: CONF_GCOV=--enable-gcov
  - compiler: clang
    env: CSA_CHECK=true CPPCHECK=true
  - compiler: gcc
    env: SANITIZE=address
  - os: osx
    env: SANITIZE=address
  - compiler: gcc
    env: SANITIZE=memory,undefined
  - os: osx
    env: SANITIZE=memory,undefined
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=aarch64-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=alpha-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=arm-unknown-linux-gnueabi
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=hppa-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=ia64-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=m68k-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=mips-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=mips64-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=powerpc-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=powerpc64-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=ppc64le-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=s390x-linux
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=sparc-linux
        CFLAGS_EXTRA="-DAO_NO_SPARC_V9"
  - compiler: clang
    env: CROSS_GCC_VER=4.9.0 NOLIBC_ARCH_ABI=sparc64-linux

sudo: required

before_install:
  - if [[ ("$CFLAGS_EXTRA_M" == "-m32" || "$CROSS_GCC_VER" != "")
          && "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get install gcc-multilib;
    fi
  - if [[ "$CONF_GCOV" == --en* ]]; then
      sudo apt-get install lcov;
      gem install coveralls-lcov;
      CONF_SHARED=--enable-shared;
      CFLAGS_EXTRA="-march=native -DDEBUG_RUN_ONE_TEST -DVERBOSE";
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      git clone --depth=3 https://github.com/danmar/cppcheck.git
            ~/cppcheck -b master;
      make --directory ~/cppcheck -j CXXFLAGS="-O3 -march=native -DNDEBUG";
    fi
  - if [[ "$CSA_CHECK" == true || "$CPPCHECK" == true ]]; then
      MAKEFILE_TARGET=all;
    elif [[ "$CROSS_GCC_VER" != "" ]]; then
      BUILD_ARCH=x86_64;
      TAR_FOLDER_URL=https://www.kernel.org/pub/tools/crosstool/files/bin/$BUILD_ARCH/$CROSS_GCC_VER;
      TARFILE=$BUILD_ARCH-gcc-$CROSS_GCC_VER-nolibc_$NOLIBC_ARCH_ABI.tar.xz;
      wget -O - $TAR_FOLDER_URL/$TARFILE | tar xf - --xz --directory ~;
      export C_INCLUDE_PATH=/usr/include;
      MAKEFILE_TARGET=check-nolink;
    else
      MAKEFILE_TARGET=check;
    fi
  - if [[ "$SANITIZE" != "" ]]; then
      CFLAGS_EXTRA="$CFLAGS_EXTRA -fsanitize=$SANITIZE -fno-common -fno-omit-frame-pointer";
    fi

install:
  - ./autogen.sh

script:
  - ./configure $CONF_ASSERTIONS $CONF_INTRINSICS $CONF_GCOV
                $CONF_SHARED --enable-werror
  - if [[ "$CSA_CHECK" != true && "$CPPCHECK" != true ]]; then
      cat src/config.h;
    fi
  - if [[ "$CROSS_GCC_VER" != "" ]]; then
      export CC=~/gcc-$CROSS_GCC_VER-nolibc/$NOLIBC_ARCH_ABI/bin/$NOLIBC_ARCH_ABI-gcc;
    fi
  - make -j $MAKEFILE_TARGET CC=$CC
        CFLAGS_EXTRA="$CFLAGS_EXTRA $CFLAGS_EXTRA_M"
  - if [ -f tests/test_atomic.log ]; then cat tests/test_atomic*.log; fi
  - if [[ "$CSA_CHECK" == true ]]; then
      clang --analyze -Xanalyzer -analyzer-output=text -Werror -I src
            -DAO_TRACE_MALLOC -DVERBOSE tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      ~/cppcheck/cppcheck -f -q --error-exitcode=2 -j16 -Ulong -DCPPCHECK
                --enable=information,performance,portability,style,warning
                -I src tests/*.c src/*.c;
    fi
  - if [[ "$CPPCHECK" == true ]]; then
      ~/cppcheck/cppcheck -f -q --error-exitcode=2 -Ulong -DAO_TEST_EMULATION
                -DCPPCHECK -I src --enable=unusedFunction tests/*.c src/*.c;
    fi
  - if [[ "$SANITIZE" == *memory* || "$SANITIZE" == *undefined* ]]; then
      UBSAN_OPTIONS="halt_on_error=1" make -C tests check-without-test-driver;
    fi

after_success:
  - if [[ "$CONF_GCOV" == --en* ]]; then
      lcov --capture --directory src --directory tests --output-file coverage.info;
      lcov --remove coverage.info '/usr/*' 'tests/*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi
